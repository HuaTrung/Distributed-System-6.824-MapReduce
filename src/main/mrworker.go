package main

//
// start a worker process, which is implemented
// in ../mr/worker.go. typically there will be
// multiple worker processes, talking to one master.
//
// go run mrworker.go wc.so
//
// Please do not change this file.
//

import (
	"encoding/json"
	"os"
	"strconv"
	"strings"
	"unicode"

	"../models"

	"../mr"
	log "github.com/sirupsen/logrus"
)

// Cant build plugin on Window therefore I embedded funcs in-place
func Map(filename string, contents string) []models.KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []models.KeyValue{}
	for _, w := range words {
		kv := models.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	res := 0
	// return the number of occurrences of this word.
	for _, path := range values {
		file, err := os.Open(path)
		if err != nil {
			log.Fatalf("cannot open %v", path)
		}
		dec := json.NewDecoder(file)

		for {
			var kv models.KeyValue
			if err := dec.Decode(&kv); err != nil {
				break
			}
			if i, err := strconv.Atoi(kv.Value); err == nil {
				res += i
			}

		}
	}
	return strconv.Itoa(res)
}

//
func main() {
	// if len(os.Args) != 2 {
	// 	fmt.Fprintf(os.Stderr, "Usage: mrworker xxx.so\n")
	// 	os.Exit(1)
	// }

	// mapf, reducef := loadPlugin(os.Args[1])
	mapf, reducef := Map, Reduce
	w := mr.MakeWorker(mapf, reducef)
	if w.Register() {
		log.Info("Successful Register")
	}
	for {

	}
}
